// Generated by CoffeeScript 1.6.2
(function() {
  var ListView, SearchView, Track, TrackView, Tracks, listView, searchView;

  Track = Backbone.Model.extend({
    defaults: {
      Name: "Default Name",
      Artist: "Artist Name",
      Album: "Album Name"
    },
    idAttribute: "_id",
    initialize: function() {
      return this.on("change", function(model) {});
    }
  });

  Tracks = Backbone.Collection.extend({
    model: Track,
    url: function() {
      var term, url;

      term = $("#search-term").val() || "hello";
      url = "/search/" + term;
      return url;
    },
    initialize: function() {
      _.bindAll(this, "retrieve");
      return this.retrieve();
    },
    retrieve: function() {
      var self;

      self = this;
      return this.fetch({
        success: function(collection, response, options) {
          self.reset();
          self.add(response.result);
          return self.trigger("change");
        },
        error: function(collection, xhr, options) {}
      });
    }
  });

  TrackView = Backbone.View.extend({
    tagName: "tr",
    initialize: function() {
      _.bindAll(this, "render");
      return this.model.bind("change", this.render);
    },
    render: function() {
      var self;

      self = this;
      $(this.el).html("<td><i class=\"icon-music\"></i> " + self.model.get("Name") + "</td>" + "<td>" + self.model.get("Album") + "</td>" + "<td>" + self.model.get("Artist") + "</td>");
      return this;
    }
  });

  ListView = Backbone.View.extend({
    el: "#tracks",
    initialize: function() {
      var self;

      self = this;
      _.bindAll(this, "render", "appendTrack");
      this.collection = new Tracks();
      return this.collection.bind("change", this.render);
    },
    render: function() {
      var self;

      self = this;
      console.log("TracksView.render");
      this.$el.html("");
      _(this.collection.models).each((function(item) {
        return self.appendTrack(item);
      }), this);
      return this;
    },
    appendTrack: function(item) {
      var trackView;

      trackView = new TrackView({
        model: item
      });
      return $("#tracks").append(trackView.render().el);
    }
  });

  SearchView = Backbone.View.extend({
    el: "#search-form",
    initialize: function() {
      _.bindAll(this, "render", "goSearch");
      return this.render();
    },
    events: {
      "click #search-button": "goSearch"
    },
    render: function() {
      var template;

      template = _.template($("#search-template").html(), {});
      this.$el.append(template);
      return this;
    },
    goSearch: function(e) {
      e.preventDefault();
      return listView.initialize();
    }
  });

  listView = new ListView();

  searchView = new SearchView();

}).call(this);
